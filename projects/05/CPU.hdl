// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // c-instruction spec
    // [15] 1
    // [14] x
    // [13] x
    // [12] a
    // [11] c
    // [10] c
    // [9]  c
    // [8]  c
    // [7]  c
    // [6]  c
    // [5]  d
    // [4]  d
    // [3]  d
    // [2]  j
    // [1]  j
    // [0]  j

    PARTS:
    // Put your code here:
    // each component, left to right
    // wire up c instructions
    // is everything wired up?
    Mux16(a=instruction, b=outM, out=addressOrAluOutput, sel=instruction[15]);
    Not(in=instruction[15], out=isAInstruction);
    ARegister(in=addressOrAluOutput, load=isAInstruction, out=addressM);
    DRegister(in=outM, load=TODO, out=dValue)

    Mux16(a=addressM, b=inM, out=aluInput, sel=instruction[12]);

    ALU(
      x=dValue, // TODO are these the right way round?
      y=aluInput,
      out=outM,
      zx=instruction[11], // zero the x input? TODO mapping not validated
      nx=instruction[10], // negate the x input?
      zy=instruction[9], // zero the y input?
      ny=instruction[8], // negate the y input?
      f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
      no=instruction[6], // negate the out output?
      zr=zrOutTODO,
      ng=ngOutTODO
    );

    PC(
        in=addressM,
        out=pc,
        load=X,
        inc=X,
        reset=reset,
    );
}
